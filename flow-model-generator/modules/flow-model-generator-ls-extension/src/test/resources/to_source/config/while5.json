{
  "source": "empty.bal",
  "description": "Sample diagram node",
  "diagram": {
    "id": "83120",
    "metadata": {
      "label": "While",
      "description": "Loop over a block of code."
    },
    "codedata": {
      "node": "WHILE",
      "lineRange": {
        "fileName": "while.bal",
        "startLine": {
          "line": 51,
          "offset": 8
        },
        "endLine": {
          "line": 68,
          "offset": 9
        }
      },
      "sourceCode": "while i < count {\n            json response = check foodClient->get(\"/food/pineapples\");\n            finalMsg += response.toString();\n            i += 1;\n        } on fail http:ClientError e {\n            int attempts = 0;\n            http:Client|http:ClientError adminClient = new (\"http://localhost:9090\");\n            if adminClient is http:ClientError {\n                return \"Error occurred while creating admin client\";\n            }\n            while attempts < retries {\n                json response = check adminClient->post(\"/admin/restart\", {body: e.message()});\n                return \"Response received from admin service: \" + response.toString();\n            } on fail {\n                return \"Error occurred while invoking admin service\";\n            }\n            return \"Error occurred while invoking food service\";\n        }"
    },
    "returning": false,
    "branches": [
      {
        "label": "Body",
        "kind": "BLOCK",
        "codedata": {
          "node": "CONDITIONAL",
          "lineRange": {
            "fileName": "while.bal",
            "startLine": {
              "line": 51,
              "offset": 24
            },
            "endLine": {
              "line": 55,
              "offset": 9
            }
          },
          "sourceCode": "{\n            json response = check foodClient->get(\"/food/pineapples\");\n            finalMsg += response.toString();\n            i += 1;\n        }"
        },
        "repeatable": "ONE",
        "children": [
          {
            "id": "83770",
            "metadata": {
              "label": "get",
              "description": "The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n",
              "icon": "https://bcentral-packageicons.azureedge.net/images/ballerina_http_2.12.2.png"
            },
            "codedata": {
              "node": "REMOTE_ACTION_CALL",
              "org": "ballerina",
              "module": "http",
              "object": "Client",
              "symbol": "get",
              "version": "2.12.2",
              "lineRange": {
                "fileName": "while.bal",
                "startLine": {
                  "line": 52,
                  "offset": 12
                },
                "endLine": {
                  "line": 52,
                  "offset": 70
                }
              },
              "sourceCode": "json response = check foodClient->get(\"/food/pineapples\");"
            },
            "returning": false,
            "properties": {
              "connection": {
                "metadata": {
                  "label": "Connection",
                  "description": "Connection to use"
                },
                "valueType": "EXPRESSION",
                "value": "foodClient",
                "optional": false,
                "editable": true,
                "advanced": false
              },
              "variable": {
                "metadata": {
                  "label": "Variable Name",
                  "description": "Name of the variable"
                },
                "valueType": "IDENTIFIER",
                "value": "response",
                "placeholder": "item",
                "optional": false,
                "editable": true,
                "advanced": false
              },
              "path": {
                "metadata": {
                  "label": "path",
                  "description": "Request path"
                },
                "valueType": "EXPRESSION",
                "value": "\"/food/pineapples\"",
                "placeholder": "\"\"",
                "optional": false,
                "editable": true,
                "advanced": false,
                "codedata": {
                  "kind": "REQUIRED",
                  "originalName": "path"
                }
              },
              "headers": {
                "metadata": {
                  "label": "headers",
                  "description": "The entity headers"
                },
                "value": "()",
                "placeholder": "()",
                "valueType": "EXPRESSION",
                "optional": true,
                "editable": true,
                "advanced": true,
                "codedata": {
                  "kind": "DEFAULTABLE",
                  "originalName": "headers"
                }
              },
              "checkError": {
                "metadata": {
                  "label": "Check Flag",
                  "description": "Whether to return the error"
                },
                "valueType": "FLAG",
                "value": true,
                "optional": false,
                "editable": true,
                "advanced": false
              },
              "type": {
                "metadata": {
                  "label": "Variable Type",
                  "description": "Type of the variable"
                },
                "valueType": "TYPE",
                "value": "json",
                "placeholder": "var",
                "optional": false,
                "editable": true,
                "advanced": false
              }
            },
            "flags": 1
          },
          {
            "id": "84736",
            "metadata": {
              "label": "Custom Expression",
              "description": "Represents a custom Ballerina expression"
            },
            "codedata": {
              "node": "EXPRESSION",
              "lineRange": {
                "fileName": "while.bal",
                "startLine": {
                  "line": 53,
                  "offset": 12
                },
                "endLine": {
                  "line": 53,
                  "offset": 44
                }
              },
              "sourceCode": "finalMsg += response.toString();"
            },
            "returning": false,
            "properties": {
              "statement": {
                "metadata": {
                  "label": "Statement",
                  "description": "Ballerina statement"
                },
                "valueType": "EXPRESSION",
                "value": "finalMsg += response.toString();",
                "optional": false,
                "editable": true,
                "advanced": false
              }
            },
            "flags": 0
          },
          {
            "id": "85703",
            "metadata": {
              "label": "Custom Expression",
              "description": "Represents a custom Ballerina expression"
            },
            "codedata": {
              "node": "EXPRESSION",
              "lineRange": {
                "fileName": "while.bal",
                "startLine": {
                  "line": 54,
                  "offset": 12
                },
                "endLine": {
                  "line": 54,
                  "offset": 19
                }
              },
              "sourceCode": "i += 1;"
            },
            "returning": false,
            "properties": {
              "statement": {
                "metadata": {
                  "label": "Statement",
                  "description": "Ballerina statement"
                },
                "valueType": "EXPRESSION",
                "value": "i += 1;",
                "optional": false,
                "editable": true,
                "advanced": false
              }
            },
            "flags": 0
          }
        ]
      },
      {
        "label": "On Failure",
        "kind": "BLOCK",
        "codedata": {
          "node": "ON_FAILURE",
          "lineRange": {
            "fileName": "while.bal",
            "startLine": {
              "line": 55,
              "offset": 37
            },
            "endLine": {
              "line": 68,
              "offset": 9
            }
          },
          "sourceCode": "{\n            int attempts = 0;\n            http:Client|http:ClientError adminClient = new (\"http://localhost:9090\");\n            if adminClient is http:ClientError {\n                return \"Error occurred while creating admin client\";\n            }\n            while attempts < retries {\n                json response = check adminClient->post(\"/admin/restart\", {body: e.message()});\n                return \"Response received from admin service: \" + response.toString();\n            } on fail {\n                return \"Error occurred while invoking admin service\";\n            }\n            return \"Error occurred while invoking food service\";\n        }"
        },
        "repeatable": "ZERO_OR_ONE",
        "properties": {
          "ignore": {
            "metadata": {
              "label": "Ignore",
              "description": "Ignore the error value"
            },
            "valueType": "EXPRESSION",
            "value": "false",
            "optional": false,
            "editable": true,
            "advanced": false
          },
          "errorVariable": {
            "metadata": {
              "label": "Error Variable",
              "description": "Name of the error variable"
            },
            "valueType": "IDENTIFIER",
            "value": "e ",
            "placeholder": "err",
            "optional": false,
            "editable": true,
            "advanced": false
          },
          "errorType": {
            "metadata": {
              "label": "Error Type",
              "description": "Type of the error"
            },
            "valueType": "TYPE",
            "value": "http:ClientError",
            "placeholder": "error",
            "optional": false,
            "editable": true,
            "advanced": false
          }
        },
        "children": [
          {
            "id": "87697",
            "metadata": {
              "label": "Variable",
              "description": "Assign a value to a variable"
            },
            "codedata": {
              "node": "VARIABLE",
              "lineRange": {
                "fileName": "while.bal",
                "startLine": {
                  "line": 56,
                  "offset": 12
                },
                "endLine": {
                  "line": 56,
                  "offset": 29
                }
              },
              "sourceCode": "int attempts = 0;"
            },
            "returning": false,
            "properties": {
              "expression": {
                "metadata": {
                  "label": "Expression",
                  "description": "Expression"
                },
                "valueType": "EXPRESSION",
                "value": "0",
                "optional": true,
                "editable": true,
                "advanced": false
              },
              "variable": {
                "metadata": {
                  "label": "Name",
                  "description": "Name of the variable"
                },
                "valueType": "IDENTIFIER",
                "value": "attempts",
                "placeholder": "item",
                "optional": false,
                "editable": true,
                "advanced": false
              },
              "type": {
                "metadata": {
                  "label": "Type",
                  "description": "Type of the variable"
                },
                "valueType": "TYPE",
                "value": "int",
                "placeholder": "var",
                "optional": false,
                "editable": true,
                "advanced": false
              }
            },
            "flags": 0
          },
          {
            "id": "88745",
            "metadata": {
              "label": "Variable",
              "description": "Assign a value to a variable"
            },
            "codedata": {
              "node": "VARIABLE",
              "lineRange": {
                "fileName": "while.bal",
                "startLine": {
                  "line": 57,
                  "offset": 12
                },
                "endLine": {
                  "line": 57,
                  "offset": 85
                }
              },
              "sourceCode": "http:Client|http:ClientError adminClient = new (\"http://localhost:9090\");"
            },
            "returning": false,
            "properties": {
              "expression": {
                "metadata": {
                  "label": "Expression",
                  "description": "Expression"
                },
                "valueType": "EXPRESSION",
                "value": "new (\"http://localhost:9090\")",
                "optional": true,
                "editable": true,
                "advanced": false
              },
              "variable": {
                "metadata": {
                  "label": "Name",
                  "description": "Name of the variable"
                },
                "valueType": "IDENTIFIER",
                "value": "adminClient",
                "placeholder": "item",
                "optional": false,
                "editable": true,
                "advanced": false
              },
              "type": {
                "metadata": {
                  "label": "Type",
                  "description": "Type of the variable"
                },
                "valueType": "TYPE",
                "value": "http:Client",
                "placeholder": "var",
                "optional": false,
                "editable": true,
                "advanced": false
              }
            },
            "flags": 0
          },
          {
            "id": "89727",
            "metadata": {
              "label": "If",
              "description": "Add conditional branch to the integration flow."
            },
            "codedata": {
              "node": "IF",
              "lineRange": {
                "fileName": "while.bal",
                "startLine": {
                  "line": 58,
                  "offset": 12
                },
                "endLine": {
                  "line": 60,
                  "offset": 13
                }
              },
              "sourceCode": "if adminClient is http:ClientError {\n                return \"Error occurred while creating admin client\";\n            }"
            },
            "returning": false,
            "branches": [
              {
                "label": "Then",
                "kind": "BLOCK",
                "codedata": {
                  "node": "CONDITIONAL",
                  "lineRange": {
                    "fileName": "while.bal",
                    "startLine": {
                      "line": 58,
                      "offset": 47
                    },
                    "endLine": {
                      "line": 60,
                      "offset": 13
                    }
                  },
                  "sourceCode": "{\n                return \"Error occurred while creating admin client\";\n            }"
                },
                "repeatable": "ONE_OR_MORE",
                "properties": {
                  "condition": {
                    "metadata": {
                      "label": "Condition",
                      "description": "Boolean Condition"
                    },
                    "valueType": "EXPRESSION",
                    "value": "adminClient is http:ClientError ",
                    "placeholder": "true",
                    "optional": false,
                    "editable": true,
                    "advanced": false
                  }
                },
                "children": [
                  {
                    "id": "90836",
                    "metadata": {
                      "label": "Return",
                      "description": "Value of '\"Error occurred while creating admin client\"'"
                    },
                    "codedata": {
                      "node": "RETURN",
                      "lineRange": {
                        "fileName": "while.bal",
                        "startLine": {
                          "line": 59,
                          "offset": 16
                        },
                        "endLine": {
                          "line": 59,
                          "offset": 68
                        }
                      },
                      "sourceCode": "return \"Error occurred while creating admin client\";"
                    },
                    "returning": true,
                    "properties": {
                      "expression": {
                        "metadata": {
                          "label": "Expression",
                          "description": "Return value"
                        },
                        "valueType": "EXPRESSION",
                        "value": "\"Error occurred while creating admin client\"",
                        "optional": false,
                        "editable": true,
                        "advanced": false
                      }
                    },
                    "flags": 0
                  }
                ]
              }
            ],
            "flags": 0
          },
          {
            "id": "92796",
            "metadata": {
              "label": "While",
              "description": "Loop over a block of code."
            },
            "codedata": {
              "node": "WHILE",
              "lineRange": {
                "fileName": "while.bal",
                "startLine": {
                  "line": 61,
                  "offset": 12
                },
                "endLine": {
                  "line": 66,
                  "offset": 13
                }
              },
              "sourceCode": "while attempts < retries {\n                json response = check adminClient->post(\"/admin/restart\", {body: e.message()});\n                return \"Response received from admin service: \" + response.toString();\n            } on fail {\n                return \"Error occurred while invoking admin service\";\n            }"
            },
            "returning": false,
            "branches": [
              {
                "label": "Body",
                "kind": "BLOCK",
                "codedata": {
                  "node": "CONDITIONAL",
                  "lineRange": {
                    "fileName": "while.bal",
                    "startLine": {
                      "line": 61,
                      "offset": 37
                    },
                    "endLine": {
                      "line": 64,
                      "offset": 13
                    }
                  },
                  "sourceCode": "{\n                json response = check adminClient->post(\"/admin/restart\", {body: e.message()});\n                return \"Response received from admin service: \" + response.toString();\n            }"
                },
                "repeatable": "ONE",
                "children": [
                  {
                    "id": "93839",
                    "metadata": {
                      "label": "post",
                      "description": "The `Client.post()` function can be used to send HTTP POST requests to HTTP endpoints.\n",
                      "icon": "https://bcentral-packageicons.azureedge.net/images/ballerina_http_2.12.2.png"
                    },
                    "codedata": {
                      "node": "REMOTE_ACTION_CALL",
                      "org": "ballerina",
                      "module": "http",
                      "object": "Client",
                      "symbol": "post",
                      "version": "2.12.2",
                      "lineRange": {
                        "fileName": "while.bal",
                        "startLine": {
                          "line": 62,
                          "offset": 16
                        },
                        "endLine": {
                          "line": 62,
                          "offset": 95
                        }
                      },
                      "sourceCode": "json response = check adminClient->post(\"/admin/restart\", {body: e.message()});"
                    },
                    "returning": false,
                    "properties": {
                      "connection": {
                        "metadata": {
                          "label": "Connection",
                          "description": "Connection to use"
                        },
                        "valueType": "EXPRESSION",
                        "value": "adminClient",
                        "optional": false,
                        "editable": true,
                        "advanced": false
                      },
                      "variable": {
                        "metadata": {
                          "label": "Variable Name",
                          "description": "Name of the variable"
                        },
                        "valueType": "IDENTIFIER",
                        "value": "response",
                        "placeholder": "item",
                        "optional": false,
                        "editable": true,
                        "advanced": false
                      },
                      "path": {
                        "metadata": {
                          "label": "path",
                          "description": "Resource path"
                        },
                        "valueType": "EXPRESSION",
                        "value": "\"/admin/restart\"",
                        "optional": false,
                        "editable": true,
                        "advanced": false,
                        "codedata": {
                          "kind": "REQUIRED",
                          "originalName": "path"
                        }
                      },
                      "message": {
                        "metadata": {
                          "label": "message",
                          "description": "An HTTP outbound request or any allowed payload"
                        },
                        "valueType": "EXPRESSION",
                        "value": "{body: e.message()}",
                        "placeholder": "\"\"",
                        "optional": false,
                        "editable": true,
                        "advanced": false,
                        "codedata": {
                          "kind": "DEFAULTABLE",
                          "originalName": "message"
                        }
                      },
                      "headers": {
                        "metadata": {
                          "label": "headers",
                          "description": "The entity headers"
                        },
                        "value": "()",
                        "placeholder": "()",
                        "valueType": "EXPRESSION",
                        "optional": true,
                        "editable": true,
                        "advanced": true,
                        "codedata": {
                          "kind": "DEFAULTABLE",
                          "originalName": "headers"
                        }
                      },
                      "mediaType": {
                        "metadata": {
                          "label": "mediaType",
                          "description": "The MIME type header of the request entity"
                        },
                        "value": "()",
                        "placeholder": "()",
                        "valueType": "EXPRESSION",
                        "optional": true,
                        "editable": true,
                        "advanced": true,
                        "codedata": {
                          "kind": "DEFAULTABLE",
                          "originalName": "mediaType"
                        }
                      },
                      "checkError": {
                        "metadata": {
                          "label": "Check Flag",
                          "description": "Whether to return the error"
                        },
                        "valueType": "FLAG",
                        "value": true,
                        "optional": false,
                        "editable": true,
                        "advanced": false
                      },
                      "type": {
                        "metadata": {
                          "label": "Variable Type",
                          "description": "Type of the variable"
                        },
                        "valueType": "TYPE",
                        "value": "json",
                        "placeholder": "var",
                        "optional": false,
                        "editable": true,
                        "advanced": false
                      }
                    },
                    "flags": 1
                  },
                  {
                    "id": "94822",
                    "metadata": {
                      "label": "Return",
                      "description": "Value of '\"Response received from admin service: \" + response.toString()'"
                    },
                    "codedata": {
                      "node": "RETURN",
                      "lineRange": {
                        "fileName": "while.bal",
                        "startLine": {
                          "line": 63,
                          "offset": 16
                        },
                        "endLine": {
                          "line": 63,
                          "offset": 86
                        }
                      },
                      "sourceCode": "return \"Response received from admin service: \" + response.toString();"
                    },
                    "returning": true,
                    "properties": {
                      "expression": {
                        "metadata": {
                          "label": "Expression",
                          "description": "Return value"
                        },
                        "valueType": "EXPRESSION",
                        "value": "\"Response received from admin service: \" + response.toString()",
                        "optional": false,
                        "editable": true,
                        "advanced": false
                      }
                    },
                    "flags": 0
                  }
                ]
              },
              {
                "label": "On Failure",
                "kind": "BLOCK",
                "codedata": {
                  "node": "ON_FAILURE",
                  "lineRange": {
                    "fileName": "while.bal",
                    "startLine": {
                      "line": 64,
                      "offset": 22
                    },
                    "endLine": {
                      "line": 66,
                      "offset": 13
                    }
                  },
                  "sourceCode": "{\n                return \"Error occurred while invoking admin service\";\n            }"
                },
                "repeatable": "ZERO_OR_ONE",
                "children": [
                  {
                    "id": "96789",
                    "metadata": {
                      "label": "Return",
                      "description": "Value of '\"Error occurred while invoking admin service\"'"
                    },
                    "codedata": {
                      "node": "RETURN",
                      "lineRange": {
                        "fileName": "while.bal",
                        "startLine": {
                          "line": 65,
                          "offset": 16
                        },
                        "endLine": {
                          "line": 65,
                          "offset": 69
                        }
                      },
                      "sourceCode": "return \"Error occurred while invoking admin service\";"
                    },
                    "returning": true,
                    "properties": {
                      "expression": {
                        "metadata": {
                          "label": "Expression",
                          "description": "Return value"
                        },
                        "valueType": "EXPRESSION",
                        "value": "\"Error occurred while invoking admin service\"",
                        "optional": false,
                        "editable": true,
                        "advanced": false
                      }
                    },
                    "flags": 0
                  }
                ]
              }
            ],
            "properties": {
              "condition": {
                "metadata": {
                  "label": "Condition",
                  "description": "Boolean Condition"
                },
                "valueType": "EXPRESSION",
                "value": "attempts < retries ",
                "placeholder": "true",
                "optional": false,
                "editable": true,
                "advanced": false
              }
            },
            "flags": 0
          },
          {
            "id": "98644",
            "metadata": {
              "label": "Return",
              "description": "Value of '\"Error occurred while invoking food service\"'"
            },
            "codedata": {
              "node": "RETURN",
              "lineRange": {
                "fileName": "while.bal",
                "startLine": {
                  "line": 67,
                  "offset": 12
                },
                "endLine": {
                  "line": 67,
                  "offset": 64
                }
              },
              "sourceCode": "return \"Error occurred while invoking food service\";"
            },
            "returning": true,
            "properties": {
              "expression": {
                "metadata": {
                  "label": "Expression",
                  "description": "Return value"
                },
                "valueType": "EXPRESSION",
                "value": "\"Error occurred while invoking food service\"",
                "optional": false,
                "editable": true,
                "advanced": false
              }
            },
            "flags": 0
          }
        ]
      }
    ],
    "properties": {
      "condition": {
        "metadata": {
          "label": "Condition",
          "description": "Boolean Condition"
        },
        "valueType": "EXPRESSION",
        "value": "i < count ",
        "placeholder": "true",
        "optional": false,
        "editable": true,
        "advanced": false
      }
    },
    "flags": 0
  },
  "output": {
    "empty.bal": [
      {
        "range": {
          "start": {
            "line": 51,
            "character": 8
          },
          "end": {
            "line": 68,
            "character": 9
          }
        },
        "newText": "while i < count {\n    json response = check foodClient->get(\"/food/pineapples\");\n    finalMsg += response.toString();\n;i += 1;\n; } on fail http:ClientError e {\n    int attempts = 0;\n    http:Client adminClient = new (\"http://localhost:9090\");\n    if adminClient is http:ClientError {\n        return \"Error occurred while creating admin client\";\n    }\n    while attempts < retries {\n        json response = check adminClient->post(\"/admin/restart\", {body: e.message()});\n        return \"Response received from admin service: \" + response.toString();\n    } on fail {\n        return \"Error occurred while invoking admin service\";\n    }\n    return \"Error occurred while invoking food service\";\n}"
      }
    ]
  }
}
