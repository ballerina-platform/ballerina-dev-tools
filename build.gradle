/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id "com.github.spotbugs-base" version "${spotbugsPluginVersion}"
    id "com.github.johnrengelman.shadow" version "${shadowJarPluginVersion}"
    id "de.undercouch.download" version "${downloadPluginVersion}"
    id "net.researchgate.release" version "${releasePluginVersion}"
}
apply plugin: 'maven-publish'


allprojects {
    group = project.group
    version = project.version

    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/*'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }

    ext {
        snapshotVersion= '-SNAPSHOT'
        timestampedVersionRegex = '.*-\\d{8}-\\d{6}-\\w.*\$'
    }
}

subprojects {
    apply plugin: "java"
    configurations {
        ballerinaStdLibs
    }
    dependencies {
        /* Standard libraries */
        ballerinaStdLibs "io.ballerina.stdlib:constraint-ballerina:${stdlibConstraintVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:io-ballerina:${stdlibIoVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:random-ballerina:${stdlibRandomVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:regex-ballerina:${stdlibRegexVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:time-ballerina:${stdlibTimeVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:url-ballerina:${stdlibUrlVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:crypto-ballerina:${stdlibCryptoVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:log-ballerina:${stdlibLogVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:os-ballerina:${stdlibOsVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:uuid-ballerina:${stdlibUuidVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:auth-ballerina:${stdlibAuthVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:oauth2-ballerina:${stdlibOAuth2Version}"
        ballerinaStdLibs "io.ballerina.stdlib:http-ballerina:${stdlibHttpVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:graphql-ballerina:${stdlibGraphqlVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:grpc-ballerina:${stdlibGrpcVersion}"
        ballerinaStdLibs "io.ballerina:observe-ballerina:${observeInternalVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:observe-ballerina:${observeVersion}"

        /* Ballerina Persist Tool */
        ballerinaStdLibs "io.ballerina:persist-tools:${persistToolVersion}"
    }
}

def moduleVersion = project.version
if (moduleVersion.indexOf('-') != -1) {
    moduleVersion = moduleVersion.substring(0, moduleVersion.indexOf('-'))
}
def artifactLibParent = file("$project.rootDir/build/architecture-model-generator/")
def artifactGraphqlLibParent = file("$project.rootDir/build/graphql-model-generator/")
def artifactSequenceLibParent = file("$project.rootDir/build/sequence-diagram-model-generator/")
def artifactWorkerLibParent = file("$project.rootDir/build/worker-model-generator/")
def targetArchModelGeneratorCore = file("$project.rootDir/architecture-model-generator/modules/architecture-model-generator-core/build/libs/architecture-model-generator-core-${project.version}.jar")
def targetArchModelGeneratorPlugin = file("$project.rootDir/architecture-model-generator/modules/architecture-model-generator-plugin/build/libs/architecture-model-generator-plugin-${project.version}.jar")
def targetArchModelGeneratorLSExt = file("$project.rootDir/architecture-model-generator/modules/architecture-model-generator-ls-extension/build/libs/architecture-model-generator-ls-extension-${project.version}.jar")
def targetWorkerModelGeneratorCore = file("$project.rootDir/worker-model-generator/modules/model-generator-core/build/libs/model-generator-core-${project.version}.jar")
def targetWorkerModelGeneratorLSExt = file("$project.rootDir/worker-model-generator/modules/model-generator-ls-extension/build/libs/model-generator-ls-extension-${project.version}.jar")
def targetGraphqlModelGeneratorCore = file("$project.rootDir/graphql-model-generator/modules/graphql-model-generator-core/build/libs/graphql-model-generator-core-${project.version}.jar")
def targetGraphqlModelGeneratorLSExt = file("$project.rootDir/graphql-model-generator/modules/graphql-model-generator-ls-extension/build/libs/graphql-model-generator-ls-extension-${project.version}.jar")
def targetSequenceDiagramGeneratorCore = file("$project.rootDir/sequence-diagram-generator/modules/sequence-diagram-model-generator-core/build/libs/sequence-diagram-generator-core-${project.version}.jar")
def targetSequenceDiagramGeneratorLSExt = file("$project.rootDir/sequence-diagram-generator/modules/sequence-diagram-model-generator-ls-extension/build/libs/sequence-diagram-generator-ls-extension-${project.version}.jar")

task copyArtifactZip {
    dependsOn(":architecture-model-generator:architecture-model-generator-core:build")
    dependsOn(":architecture-model-generator:architecture-model-generator-plugin:build")
    dependsOn(":architecture-model-generator:architecture-model-generator-ls-extension:build")
    dependsOn(":graphql-model-generator:graphql-model-generator-core:build")
    dependsOn(":graphql-model-generator:graphql-model-generator-ls-extension:build")
    dependsOn(":worker-model-generator:model-generator-core:build")
    dependsOn(":worker-model-generator:model-generator-ls-extension:build")
    dependsOn(":generatePomFileForMavenJavaPublication")
    dependsOn(":sequence-diagram-model-generator:sequence-diagram-model-generator-core:build")
    dependsOn(":sequence-diagram-model-generator:sequence-diagram-model-generator-ls-extension:build")
    inputs.dir file(project.rootDir)
    doLast {
        copy {
            from targetArchModelGeneratorCore
            into file("$artifactLibParent/libs")
        }
        copy {
            from targetArchModelGeneratorPlugin
            into file("$artifactLibParent/libs")
        }
        copy {
            from targetArchModelGeneratorLSExt
            into file("$artifactLibParent/ls-libs")
        }
        copy {
            from targetGraphqlModelGeneratorCore
            into file("$artifactGraphqlLibParent/libs")
        }
        copy {
            from targetGraphqlModelGeneratorLSExt
            into file("$artifactGraphqlLibParent/ls-libs")
        }
        copy {
            from targetWorkerModelGeneratorCore
            into file("$artifactWorkerLibParent/libs")
        }
        copy {
            from targetWorkerModelGeneratorLSExt
            into file("$artifactWorkerLibParent/ls-libs")
        }
        copy {
            from targetSequenceDiagramGeneratorCore
            into file("$artifactSequenceLibParent/libs")
        }
        copy {
            from targetSequenceDiagramGeneratorLSExt
            into file("$artifactSequenceLibParent/ls-libs")
        }
    }
    outputs.dir artifactLibParent
    doNotTrackState("build needs to run every time")
}

task createArtifactZip(type: Zip) {
    dependsOn copyArtifactZip
    dependsOn(":docerina-ui:createDocerinaUiZip")
    dependsOn(":testerina-report-tools:createTesterinaReportToolsZip")
    from "build"
    archiveFileName = 'ballerina-dev-tools-' + project.version + '.zip'
    destinationDirectory = file("dist")
    doNotTrackState("build needs to run every time")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/ballerina-dev-tools")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

release {
    failOnPublishNeeded = false

    buildTasks = ['build']
    versionPropertyFile = 'gradle.properties'
    tagTemplate = 'v${version}'
    git {
        // To release from any branch
        requireBranch = "release-${moduleVersion}"
        pushToRemote = 'origin'
    }
}

task test {
    dependsOn(":docerina-ui:npmTestDocerinaUI")
}

task build {
    dependsOn test
    dependsOn createArtifactZip
}

task clean {
    delete "build"
    delete "dist"
}

build.doNotTrackState("build needs to run every time")
publishToMavenLocal.dependsOn build
publish.dependsOn build
